{"version":3,"sources":["../../src/controllers/socket.IO.js"],"names":["app","server","require","createServer","io","listen","console","log","sockets","on","client","emit","data","get","req","res","json","error","message","time","tmpFuc","clearInterval","date","format","returnData","length","alarm","returnUpdate","setTimeout"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBACe,UAACA,GAAD,EAAS;AACvB,KAAMC,SAASC,QAAQ,MAAR,EAAgBC,YAAhB,CAA6BH,GAA7B,CAAf;AACA,KAAMI,KAAKF,QAAQ,WAAR,EAAqBD,MAArB,CAAX;AACAG,IAAGC,MAAH,CAAU,IAAV,EAAgB,YAAU;AACzBC,UAAQC,GAAR,CAAY,qBAAZ;AACA,EAFD;AAGAH,IAAGI,OAAH,CAAWC,EAAX,CAAc,YAAd,EAA4B,UAASC,MAAT,EAAiB;AAC5CJ,UAAQC,GAAR,CAAY,qBAAZ;AACAG,SAAOC,IAAP,CAAY,UAAZ,EAAwB,mBAAxB;AACAD,SAAOD,EAAP,CAAU,SAAV,EAAqB,UAASG,IAAT,EAAe;AACnCN,WAAQC,GAAR,CAAY,YAAZ;AACA,GAFD;AAGAG,SAAOD,EAAP,CAAU,aAAV,EAAyB,UAASG,IAAT,EAAe;AACvCN,WAAQC,GAAR,CAAYK,IAAZ;AACAF,UAAOC,IAAP,CAAY,UAAZ,EAAwB,mBAAxB;AACA,GAHD;AAIA,EAVD;;AAYAX,KAAIa,GAAJ,CAAQ,uBAAR,EAAgC,UAACC,GAAD,EAAKC,GAAL,EAAa;AAC5CX,KAAGO,IAAH,CAAQ,aAAR,EAAsB,eAAtB;AACAI,MAAIC,IAAJ,CAAS;AACRC,UAAO,KADC;AAERC,YAAS;AAFD,GAAT;AAIA,EAND;AAOAlB,KAAIa,GAAJ,CAAQ,wBAAR,EAAiC,UAACC,GAAD,EAAKC,GAAL,EAAa;;AAE7CX,KAAGO,IAAH,CAAQ,aAAR,EAAsB,gBAAtB;AACAI,MAAIC,IAAJ,CAAS;AACRC,UAAO,KADC;AAERC,YAAS;AAFD,GAAT;AAIA,EAPD;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAIC,aAAJ;AACG,KAAMC,SAAS,SAATA,MAAS,GAAM;AACvBC,gBAAcF,IAAd;;AAEA,MAAIG,OAAO,wBAASC,MAAT,CAAgB,qBAAhB,CAAX;AACAjB,UAAQC,GAAR,CAAYe,IAAZ;AACA,0BAAG,qEAAH,EAAyE,CACxEA,IADwE,CAAzE,EAEE,UAACE,UAAD,EAAgB;AACjB,OAAGA,WAAWC,MAAX,GAAoB,CAAvB,EAA0B;AACzB,4BAAG,wCAAH,EAA4C,CAC3CD,WAAW,CAAX,EAAcE,KAD6B,CAA5C,EAEE,UAACC,YAAD,EAAkB;AACnBrB,aAAQC,GAAR,CAAY,YAAZ;AACAH,QAAGO,IAAH,CAAQ,aAAR,EAAsB,UAAtB;AACAQ,YAAQS,WAAWR,MAAX,EAAkB,IAAlB,CAAR;AACA,KAND;AAOA,IARD,MAQO;AACNd,YAAQC,GAAR,CAAY,MAAZ;AACAY,WAAQS,WAAWR,MAAX,EAAkB,IAAlB,CAAR;AACA;AACD,GAfD;AAgBG,EArBD;AAsBAD,QAAOS,WAAWR,MAAX,EAAkB,EAAlB,CAAP;AACH,C","file":"socket.IO.js","sourcesContent":["import moment from 'moment';\nimport db from '../utils/database';\nexport default (app) => {\n\tconst server = require('http').createServer(app);  \n\tconst io = require('socket.io')(server);\n\tio.listen(8082, function(){\n\t\tconsole.log('listening on *:8082');\n\t});\n\tio.sockets.on('connection', function(client) {  \n\t\tconsole.log('Client connected...');\n\t\tclient.emit('messages', 'Hello from server');\n\t\tclient.on('connect', function(data) {\n\t\t\tconsole.log(\"Connected!\");\n\t\t});\n\t\tclient.on('messageType', function(data) {\n\t\t\tconsole.log(data);\n\t\t\tclient.emit('messages', 'Hello from server');\n\t\t});\n\t});\n\n\tapp.get('/api/v1/adjustment/on',(req,res) => {\n\t\tio.emit('messageType','adjustment_on');\n\t\tres.json({\n\t\t\terror: false,\n\t\t\tmessage: 'adjustment_on success'\n\t\t})\n\t})\n\tapp.get('/api/v1/adjustment/off',(req,res) => {\n\n\t\tio.emit('messageType','adjustment_off');\n\t\tres.json({\n\t\t\terror: false,\n\t\t\tmessage: 'adjustment_off success'\n\t\t})\n\t});\n\t// app.get('/api/v1/alarm/on',(req,res) => {\n\n\t// \tio.emit('messageType','alarm_on');\n\t// \tres.json({\n\t// \t\terror: false,\n\t// \t\tmessage: 'alarm_on success'\n\t// \t})\n\t// })\n\n\tlet time;\n    const tmpFuc = () => {\n\t\tclearInterval(time)\n\t\t\n\t\tlet date = moment().format('YYYY-MM-DD HH:mm:00');\n\t\tconsole.log(date);\n\t\tdb('SELECT * FROM `config` WHERE `alarm` = ? and (alarm != activeAlarm)',[ \n\t\t\tdate\n\t\t],(returnData) => {\n\t\t\tif(returnData.length > 0) {\n\t\t\t\tdb('UPDATE `config` SET `activeAlarm` = ? ',[ \n\t\t\t\t\treturnData[0].alarm\n\t\t\t\t],(returnUpdate) => {\n\t\t\t\t\tconsole.log('start emit')\n\t\t\t\t\tio.emit('messageType','alarm_on');\n\t\t\t\t\ttime =  setTimeout(tmpFuc,5000);\n\t\t\t\t});\t\n\t\t\t} else {\n\t\t\t\tconsole.log('Skip');\n\t\t\t\ttime =  setTimeout(tmpFuc,5000);\n\t\t\t}\n\t\t});\n    }\n    time = setTimeout(tmpFuc,10);\n};\n"]}