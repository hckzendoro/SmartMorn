{"version":3,"sources":["../../src/controllers/dashboard.api.js"],"names":["bestTemp","Array","prototype","groupBy","prop","reduce","groups","item","val","push","dashboard","req","res","token","headers","user","jwt","verify","error","json","message","userID","returnDataConfig","returnData","result","_","countBy","count","Object","keys","forEach","ele","temp","perfect","hot","cold","date","Date","now","getMonth","getDate","getFullYear","getHours","getMinutes","time","alarm","format","tempPie","labels","datasets","data","backgroundColor","hoverBackgroundColor"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAMA,WAAW,EAAjB;;AAEAC,MAAMC,SAAN,CAAgBC,OAAhB,GAA0B,UAASC,IAAT,EAAe;AACvC,SAAO,KAAKC,MAAL,CAAY,UAASC,MAAT,EAAiBC,IAAjB,EAAuB;AACxC,QAAMC,MAAMD,KAAKH,IAAL,CAAZ;AACAE,WAAOE,GAAP,IAAcF,OAAOE,GAAP,KAAe,EAA7B;AACAF,WAAOE,GAAP,EAAYC,IAAZ,CAAiBF,IAAjB;AACA,WAAOD,MAAP;AACD,GALM,EAKJ,EALI,CAAP;AAMD,CAPD;AAQO,IAAMI,gCAAY,SAAZA,SAAY,CAACC,GAAD,EAAKC,GAAL,EAAa;AACpC,MAAMC,QAAQF,IAAIG,OAAJ,CAAY,gBAAZ,CAAd;AACA,MAAI;AACF,QAAIC,OAAOC,uBAAIC,MAAJ,CAAWJ,KAAX,EAAkB,cAAlB,CAAX;AACD,GAFD,CAEE,OAAMK,KAAN,EAAa;AACb,WAAON,IAAIO,IAAJ,CAAS;AACdD,aAAO,IADO;AAEdE,eAAS;AAFK,KAAT,CAAP;AAID;;AAED,0BAAG,2CAAH,EAA+C,CAAEL,KAAKM,MAAP,CAA/C,EAA+D,UAACC,gBAAD,EAAsB;AACnF,4BAAG,8DAAH,EAAkE,EAAlE,EAAsE,UAACC,UAAD,EAAgB;;AAEpF,UAAIC,SAASC,iBAAEC,OAAF,CAAUH,UAAV,EAAsB,aAAtB,CAAb;AACA,UAAII,QAAQ,CAAZ;AACAC,aAAOC,IAAP,CAAYL,MAAZ,EAAoBM,OAApB,CAA6B,UAACC,GAAD,EAAS;AACpCJ,iBAASH,OAAOO,GAAP,CAAT;AAED,OAHD;AAIA,UAAIC,OAAO;AACTC,iBAAS,CADA;AAETC,aAAK,CAFI;AAGTC,cAAM;AAHG,OAAX;;AAMA;AACAP,aAAOC,IAAP,CAAYL,MAAZ,EAAoBM,OAApB,CAA6B,UAACC,GAAD,EAAS;AACpC,YAAGA,OAAO,EAAP,IAAaA,OAAO,EAAvB,EAA2B;AACzBC,eAAKC,OAAL,IAAiBT,OAAOO,GAAP,IAAcJ,KAAf,GAAwB,GAAxC;AACD,SAFD,MAEO,IAAGI,MAAM,EAAT,EAAa;AAClBC,eAAKE,GAAL,IAAaV,OAAOO,GAAP,IAAcJ,KAAf,GAAwB,GAApC;AACD,SAFM,MAEA,IAAGI,MAAM,EAAT,EAAa;AAClBC,eAAKG,IAAL,IAAcX,OAAOO,GAAP,IAAcJ,KAAf,GAAwB,GAArC;AACD;AACF,OARD;AASA,UAAIS,OAAO,IAAIC,IAAJ,CAASA,KAAKC,GAAL,EAAT,CAAX;AACAF,aAAQA,KAAKG,QAAL,KAAgB,CAAjB,GAAoB,GAApB,GAAwBH,KAAKI,OAAL,EAAxB,GAAuC,GAAvC,GAA2CJ,KAAKK,WAAL,EAA3C,GAA8D,GAA9D,IAAmEL,KAAKM,QAAL,KAAkB,EAAlB,GAAuBN,KAAKM,QAAL,KAAkB,EAAzC,GAA8CN,KAAKM,QAAL,EAAjH,IAAkI,GAAlI,GAAsIN,KAAKO,UAAL,EAAtI,GAAwJ,GAAxJ,IAA6JP,KAAKM,QAAL,MAAmB,EAAnB,GAAwB,IAAxB,GAA+B,IAA5L,CAAP;AACA9B,UAAIO,IAAJ,CAAS;AACPD,eAAO,KADA;AAEP0B,cAAMR,IAFC;AAGPS,eAAO,sBAAOvB,iBAAiB,CAAjB,EAAoBuB,KAA3B,EAAkCC,MAAlC,CAAyC,iBAAzC,CAHA;AAIPC,iBAAS;AACPC,kBAAQ,CACN,SADM,EAEN,UAFM,EAGN,SAHM,CADD;AAMPC,oBAAU,CAAC;AACTC,kBAAM,CACJlB,KAAKE,GADD,EAEJF,KAAKG,IAFD,EAGJH,KAAKC,OAHD,CADG;AAMTkB,6BAAiB,CACjB,SADiB,EAEjB,SAFiB,EAGjB,SAHiB,CANR;AAWTC,kCAAsB,CACtB,SADsB,EAEtB,SAFsB,EAGtB,SAHsB;AAXb,WAAD;AANH;AAJF,OAAT;AA6BD,KAvDD;AAwDD,GAzDD;AA0DD,CArEM","file":"dashboard.api.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport db from '../utils/database';\nimport md5 from 'md5';\nimport _ from 'lodash';\nimport moment from 'moment';\nconst bestTemp = 20;\n\nArray.prototype.groupBy = function(prop) {\n  return this.reduce(function(groups, item) {\n    const val = item[prop];\n    groups[val] = groups[val] || [];\n    groups[val].push(item);\n    return groups;\n  }, {});\n}\nexport const dashboard = (req,res) => {\n  const token = req.headers['x-access-token'];\n  try {\n    var user = jwt.verify(token, 'SuperHeroLOL');\n  } catch(error) {\n    return res.json({\n      error: true,\n      message: 'Not allow'\n    }); \n  }\n\n  db('SELECT * FROM `config` WHERE `userID` = ?',[ user.userID ],(returnDataConfig) => {\n    db('SELECT *,UNIX_TIMESTAMP(time) AS time_unix FROM `sensordata`',[ ],(returnData) => {\n      \n      let result = _.countBy(returnData, 'temperature');\n      let count = 0;\n      Object.keys(result).forEach(((ele) => {\n        count += result[ele];\n        \n      }));\n      let temp = {\n        perfect: 0,\n        hot: 0,\n        cold: 0\n      };\n\n      // cal percentage \n      Object.keys(result).forEach(((ele) => {\n        if(ele >= 20 && ele <= 27) {\n          temp.perfect += (result[ele] / count) * 100\n        } else if(ele > 27) {\n          temp.hot += (result[ele] / count) * 100\n        } else if(ele < 20) {\n          temp.cold += (result[ele] / count) * 100\n        }\n      }));\n      let date = new Date(Date.now());\n      date = (date.getMonth()+1)+'/'+date.getDate()+'/'+date.getFullYear()+' '+(date.getHours() > 12 ? date.getHours() - 12 : date.getHours())+':'+date.getMinutes()+' '+(date.getHours() >= 12 ? \"PM\" : \"AM\");\n      res.json({\n        error: false,\n        time: date,\n        alarm: moment(returnDataConfig[0].alarm).format('MM/DD/YYYY h:mm'),\n        tempPie: {\n          labels: [\n            'Too Hot',\n            'Too Cold',\n            'Perfect'\n          ],\n          datasets: [{\n            data: [ \n              temp.hot,\n              temp.cold,\n              temp.perfect\n            ],\n            backgroundColor: [\n            '#f90230',\n            '#00a1ff',\n            '#4caf50'\n            ],\n            hoverBackgroundColor: [\n            '#f90230',\n            '#00a1ff',\n            '#4caf50'\n            ]\n          }]\n        }\n      });\n    });\n  });\n}\n"]}