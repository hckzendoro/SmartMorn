{"version":3,"file":"5.72efc507c52eb81da0fc.hot-update.js","sources":["webpack:///redux/reducers/adjustment.js"],"sourcesContent":["import _ from 'lodash';\nimport axios from '../../utils/api';\n\nimport { defineAction } from 'redux-define';\n\nconst App = 'SMARTMORN';\n\nconst ACTION_AUTH_ADJUST = defineAction('AUTH_ADJUST', ['PENDING', 'RESOLVED', 'REJECTED','CLEAR'], App);\nconsole.log(ACTION_AUTH_ADJUST);\n\nconst initialState = {\n    loading: false,\n    error: '',\n    message: ''\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case ACTION_AUTH_ADJUST.RESOLVED: \n            return {\n                ...state,\n                error: false,\n                message: action.payload.message\n            };\n        case ACTION_AUTH_ADJUST.PENDING: \n            return {\n                ...state,\n               \n            }\n        case ACTION_AUTH_ADJUST.REJECTED: \n            return {\n                ...state,\n               \n            }\n        case ACTION_AUTH_ADJUST.CLEAR: \n            return {\n                ...state,\n                message: false\n            }\n        default: return state;\n    }\n};\n\nexport const actions = {\n    turnOn: (state) => (dispatch)  => {\n        dispatch({\n            type: ACTION_AUTH_ADJUST.PENDING\n        })\n        axios().get('/adjustment/on').then((resp) => {\n            if(!resp.data.error) {\n                return dispatch({ \n                    type: ACTION_AUTH_ADJUST.RESOLVED,\n                    payload: {\n                        message: resp.data.message\n                    }\n                });\n                \n            } else {\n                return dispatch({ \n                    type: ACTION_AUTH_ADJUST.REJECTED,\n                    payload: {\n                        message: resp.data.message\n                    }\n                });\n            }\n        }).catch((error) => {\n            return dispatch({ \n                type: ACTION_AUTH_ADJUST.REJECTED,\n                payload: {\n                    message: 'Error : cannot connect to api server'\n                }\n            });\n        });\n    },\n    turnOff: (state) => (dispatch)  => {\n        dispatch({\n            type: ACTION_AUTH_ADJUST.PENDING\n        })\n        axios().get('/adjustment/off').then((resp) => {\n            if(!resp.data.error) {\n                window.localStorage.setItem('SmartMornKey', resp.data.token);\n                return dispatch({ \n                    type: ACTION_AUTH_ADJUST.RESOLVED,\n                    payload: {\n                        message: false\n                    }\n                });\n                \n            } else {\n                return dispatch({ \n                    type: ACTION_AUTH_ADJUST.REJECTED,\n                    payload: {\n                        message: resp.data.message\n                    }\n                });\n            }\n        }).catch((error) => {\n            return dispatch({ \n                type: ACTION_AUTH_ADJUST.REJECTED,\n                payload: {\n                    message: 'Error : cannot connect to api server'\n                }\n            });\n        });\n    },\n    clearMessage: () => (dispatch) => {\n        dispatch({\n            type: ACTION_AUTH_ADJUST.CLEAR\n        })\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// redux/reducers/adjustment.js"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AAFA;AACA;AAGA;AAAA;AAtBA;AAwBA;AAEA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AA7BA;AA8BA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAOA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AA9BA;AA+BA;AAAA;AACA;AACA;AADA;AAGA;AAJA;AA9DA;;;;A","sourceRoot":""}